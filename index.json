
[{"content":" I help founders and product managers create ethical businesses that thrive in the open source ecosystem. I write about the intersection of business strategy, developer tools, cloud infra and open source governance on topics like # Open Source Business Models: Understanding ways to monetize open source Community Building: Strategies for building and maintaining communities Licensing Strategies: Navigating the complex world of open source licenses Developer Relations: Building strong relationships with the developer community Product Led Growth: Journey from adoption to revenue for OSS projects If you find my content interesting, feel free to connect on LinkedIn, or over email\n","date":"9 July 2025","externalUrl":null,"permalink":"/","section":"BoFOSS","summary":"","title":"BoFOSS","type":"page"},{"content":" Is SSO an ‘Enterprise’ Tier feature? # Let’s start with what SSO is. SSO, or single sign-on, can be considered a master key for your work apps. Usually, you would have a separate key (each key needs a separate password for your email) for each service, one for project management, and another for your cloud storage, etc. SSO lets you use just one key, one set of login details, username, and password, to unlock all the applications you need access to.\nSSO is a win-win for users and security # SSO centralizes how your identity is managed online, so it’s less annoying than juggling dozens of passwords. That convenience is a big win for users, and it’s more than just convenience; it\u0026rsquo;s crucial from the organization’s security perspective. If one weak password gets compromised, SSO helps prevent that from automatically giving an attacker the keys to the entire kingdom, so to speak. Plus, you’re just logging in less often overall, which means fewer chances for those credentials to be phished or intercepted.\nSSO is not just convenient but also more secure\nHow does identity management look without SSO? TLDR — It is a headache. Think about onboarding a new hire. Without SSO, someone, maybe the owner or office manager, must manually create an account for every tool that person needs- Email, CRM, internal chat, everything—assigning permissions for each one. More crucially, admins must remember to revoke all that access immediately when someone leaves. The ground reality is that lots of SMBs manage this with spreadsheets, and that’s time-consuming, obviously, but it\u0026rsquo;s also prone to errors. And it just doesn’t scale well as you add more people or apps. SSO is the answer.\nBut before you consider this problem solved, you should check out the SSO Wall of Shame, which lists popular SaaS companies where the price difference feels excessive. The website\u0026rsquo;s authors strongly object to Single Sign-On (SSO) being locked behind expensive enterprise pricing by most enterprise companies. The tag line states — A list of vendors that treat single sign-on as a luxury feature, not a core security requirement. Despite this, Single Sign-On (SSO) is often locked behind expensive enterprise pricing, leaving smaller teams and individual users without a secure and scalable way to manage identities. SSO shouldn’t be considered a ‘‘nice to have’’ feature for any company — it’s a baseline security requirement. IT and Security teams rely on SSO to centrally manage user accounts, enforce strong authentication, and instantly revoke access when employees leave. Without it, businesses are stuck managing logins across dozens (or even hundreds) of vendors, many of which don’t support essential security features like TOTP 2FA or U2F.\nHowever, authentication and authorization are inherently complex and critical security features for any business. So why not just pay for SSO? It boils down to two things: cost and technical hurdles.\nCosts # Often, vendors impose minimum user numbers you might have to pay for, say, 50 seats, even if you only have 15 employees, ouch. So, many smaller businesses are priced out immediately, so they go for the cheaper plan that doesn’t include SSO precisely. But it’s not just the sticker price of the SSO service itself. Remember that administrative overhead without SSO, spreadsheets, and manual work? Yeah, that has a cost too. It’s hidden, maybe, but the time spent on manual account creation, password resets, fixing errors, and potentially cleaning up after a breach caused by a weak password can add up significantly. It might even cost more than the SSO in the long run.\nTechnical hurdles # However, implementing SSO is technically challenging because it involves authentication (identity verification) and authorization (access control). Vendors must support multiple identity protocols, such as SAML and OpenID Connect, while integrating with various identity providers (IdPs), like Okta, Azure AD, and Google Workspace. Each IdP has unique setup requirements, token handling, and security policies, making it difficult for SaaS and commercial open-source (COSS) companies to offer a one-size-fits-all solution. Because of these complexities, SaaS vendors often restrict SSO to enterprise tiers where customers have the resources to configure and maintain their authentication infrastructure. Many vendors also bundle advanced authentication and role-based access control (RBAC) with their enterprise offerings, creating an artificial barrier that prevents smaller teams from accessing these essential security features. Multi-tenancy adds even more complexity, making it challenging for SaaS vendors to offer SSO at lower pricing. The key challenges include:\nEach tenant may use a different IdP and authentication protocol. The login process must dynamically route authentication requests to the correct IdP. Access control (RBAC, ABAC) must be enforced per tenant to prevent security risks. Cross-tenant collaboration requires additional safeguards. Regulatory and compliance requirements vary across tenants. What should SaaS companies do?\nBecause of these challenges, many SaaS companies limit SSO to enterprise customers with dedicated IT teams to handle setup and maintenance. However, if a provider can simplify multi-tenant SSO management, they can offer it to smaller teams at a reasonable price, improving security across the board.\nIf SaaS providers truly “take security seriously,” there needs to be a shift in pricing models to make SSO more accessible:\n✅ Including basic SSO support in individual and team plans.\n✅ Offering SSO as a reasonably priced add-on rather than an enterprise-only feature.\n✅ Providing more self-service-friendly SSO configurations for smaller teams.\nTowards that end, others have created an SSO wall of fame, including companies that price their SSO tier reasonably. How much responsibility do vendors have to price essential security features ethically to make them genuinely accessible? Commercial open-source (COSS) companies can make authentication and authorization accessible without forcing security-conscious teams into expensive enterprise contracts. Security shouldn’t be a premium feature — it should be the default, regardless of team size.\nMy 2 cents # At the end of the day, if you’re involved in developing a SaaS product, please don’t make SSO an enterprise-tier, disproportionally priced feature. It makes the internet worse and makes your biggest customers dislike you.\nMy advice for SMBs is to analyze needs, explore affordable options, compare solutions, conduct pilot projects, train staff, and continuously monitor.\nI advise Saas vendors to offer tailored solutions, flexible seat thresholds, and improved support materials. Critically, basic and essential services such as SSO should be decoupled from bundles with premium services. Please avoid using SSO as an upselling technique — Your customers will reward you in the long term.\n","date":"9 July 2025","externalUrl":null,"permalink":"/posts/sso/","section":"Posts","summary":"","title":"Is SSO an Enterprise Tier feature?","type":"posts"},{"content":"","date":"9 July 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"8 July 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"8 July 2025","externalUrl":null,"permalink":"/tags/frontend/","section":"Tags","summary":"","title":"Frontend","type":"tags"},{"content":"","date":"8 July 2025","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"Javascript","type":"tags"},{"content":"","date":"8 July 2025","externalUrl":null,"permalink":"/tags/react/","section":"Tags","summary":"","title":"React","type":"tags"},{"content":" React\u0026rsquo;s Evolving Vision: Dispelling Misconceptions and Navigating the Framework Frontier # The landscape of web development, particularly within the React ecosystem, has undergone a palpable shift, generating considerable discussion and, at times, intense debate. Recent developments indicate a strong push towards frameworks and server-side features, raising concerns about React’s future direction and the perceived influence of key industry players. This analysis aims to cut through the prevailing noise, examining the motivations behind React’s evolving vision and clarifying common misunderstandings.\nThe Vercel Conundrum: Influence or Alignment? # A prominent narrative within the developer community suggests that Vercel, the company behind Next.js, has effectively taken control of React’s trajectory, primarily to advance its commercial interests. This perception is fueled by several observations: Next.js’s prominent recommendation in React’s official documentation, its app router being highlighted as the blueprint for React’s full-stack architecture, and its current status as the sole production implementation of React Server Components (RSCs). Furthermore, the timing of Vercel’s hiring of key React team members coincided with the development of RSCs and the broader shift towards framework adoption.\nHowever, a closer examination of the situation suggests an inversion of cause and effect. The core vision for React Server Components originated within the React team itself. Unable to effectively prototype and test these ambitious concepts internally at Meta, the React team sought an external sponsor. It was, in fact, the React team that convinced Vercel to embrace their vision, leading to the re-architecture of Next.js’s app router to align with this new direction. While some changes were integrated into the React repository to coincide with major Next.js announcements, these were still executed by React team members. The current reality is that a segment of the React core team migrated to Vercel, influencing Vercel to align with React’s vision, rather than Vercel unilaterally dictating React’s path. Nevertheless, this unique relationship has undeniably granted Vercel significant and growing influence within the ecosystem.\nReact Beyond Next.js: Dispelling the Framework-Only Myth # The tight integration with Next.js has led to a widespread misconception that React is now exclusively bound to Next.js. This is demonstrably false. Next.js is a framework that utilizes React libraries; it builds upon React, rather than replacing it. React’s official website showcases other frameworks, such as Remix and Gatsby, and explicitly addresses the question of using React without a framework, affirming its continued viability.\nThe confusion likely stems from a vocabulary gap within the community, where users often conflate the choice between a full-stack framework like Next.js and a more traditional client-side single-page application (SPA) setup. This highlights a broader shift in the ecosystem, with developers grappling to understand where different tools fit within the evolving landscape.\nThe Enduring Client-Side: React’s Backward Compatibility Commitment # A significant concern among developers is the potential obsolescence of classic client-side React applications, given the increasing emphasis on server-side features. However, sources unequivocally state that React’s client-rendering functionality will not be deprecated. This confidence is rooted in Meta’s reliance on millions of lines of existing client-rendered React code internally, as well as the React team’s consistent track record of robust backward compatibility. Moreover, many new features in upcoming React versions are explicitly client-only, indicating continued investment in browser-side capabilities. The new server-side functionality is additive and optional, not a replacement for existing client-side paradigms.\nThe Framework Imperative: Performance and Integrated Solutions # If the framework emphasis is not solely driven by commercial interests, and client-side React remains viable, what then is the core motivation behind this strong push? The rationale is deeply rooted in improving performance and providing integrated solutions. Andrew Clark, a key figure on the React team, has unequivocally stated that developers should use a React framework, advocating for incremental migration for existing applications and framework adoption from the outset for new projects.\nThe benefits cited include built-in data fetching, routing, and superior out-of-the-box performance. The argument posits that choosing not to use a framework often leads to the creation of bespoke, less efficient custom stacks. The key shift, according to Clark, is the significant maturation of these frameworks, which have now surpassed the “do-it-yourself” approach in terms of efficiency and ease of use. This perspective is further supported by Dan Abramov’s explanation for the deprecation of Create React App (CRA). CRA, while simple, lacked the inherent structure to guide developers towards leveraging the full potential of the web for optimal user experience, particularly concerning server-side rendering (SSR) and static site generation (SSG). These critical features, along with data fetching, bundling, and routing, are deeply interconnected, and React alone or simple tools like CRA could not effectively address these complex interdependencies.\nThe React team’s stance is a blend of ideological conviction in a new architecture and a practical belief that frameworks save time and effort. It also acknowledges that most React applications share similar patterns and require comparable solutions, especially now that React Server Components necessitate deeper framework integration for proper functionality.\nThe Friction Points: Communication Gaps and Community Anguish # While the React team’s intentions appear largely valid, their communication strategy has created significant friction within the community. The initial official documentation, for instance, disproportionately favored Next.js and implicitly discouraged non-framework approaches. Despite the continued prevalence of tools like Vite and older CRA setups, the documentation initially buried non-framework options, often with dismissive language. Phrases like “unusual constraints” to describe SPAs, and “we can’t stop you” when referring to using React without a framework, were perceived as condescending and unsupportive. This led to a sense of abandonment among a substantial segment of the user base, with some drawing parallels to AngularJS’s controversial shifts.\nThe slow pace of documentation improvement further exacerbated this frustration. It took years and considerable community effort to achieve a more balanced and respectful representation of various React application setups. The lack of comprehensive, centralized official documentation for React Server Components themselves also contributed to confusion, forcing developers to rely on external blog posts and framework-specific documentation.\nNavigating the Evolving Ecosystem # The core insight from this deep dive is that the React team’s push towards frameworks is primarily driven by a genuine desire to enhance performance and provide integrated solutions. The narrative of Vercel’s takeover is likely an inversion of cause and effect, and fears regarding the disappearance of client-side React are unfounded. The new RSC and server functionalities are additive and optional.\nThe primary source of community frustration has stemmed not from the technical direction itself, but from communication gaps and a dismissive tone in the documentation regarding the diverse nature of the React ecosystem. While the React team faces an immense challenge in satisfying the varied needs of its vast community, transparent and respectful communication, coupled with comprehensive documentation, are paramount for fostering understanding and mitigating angst.\nUltimately, developers can continue to utilize React in ways that best suit their project requirements. The new features offer exciting possibilities for those who choose to adopt them, typically through a framework. The ongoing challenge for every developer is to cultivate the critical thinking skills necessary to discern genuine technical evolution from hype and perceived influence, empowering them to select the most appropriate tools for their specific needs without succumbing to pressure from fleeting trends.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"8 July 2025","externalUrl":null,"permalink":"/posts/react-evolving-vision/","section":"Posts","summary":"","title":"React's Evolving Vision: Dispelling Misconceptions and Navigating the Framework Frontier","type":"posts"},{"content":"","date":"8 July 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"8 July 2025","externalUrl":null,"permalink":"/categories/technology/","section":"Categories","summary":"","title":"Technology","type":"categories"},{"content":"","date":"8 July 2025","externalUrl":null,"permalink":"/tags/web-development/","section":"Tags","summary":"","title":"Web-Development","type":"tags"},{"content":"","date":"13 June 2025","externalUrl":null,"permalink":"/categories/business/","section":"Categories","summary":"","title":"Business","type":"categories"},{"content":"","date":"13 June 2025","externalUrl":null,"permalink":"/tags/business/","section":"Tags","summary":"","title":"Business","type":"tags"},{"content":"","date":"13 June 2025","externalUrl":null,"permalink":"/tags/cac/","section":"Tags","summary":"","title":"Cac","type":"tags"},{"content":"","date":"13 June 2025","externalUrl":null,"permalink":"/tags/cltv/","section":"Tags","summary":"","title":"Cltv","type":"tags"},{"content":"","date":"13 June 2025","externalUrl":null,"permalink":"/tags/growth/","section":"Tags","summary":"","title":"Growth","type":"tags"},{"content":"","date":"13 June 2025","externalUrl":null,"permalink":"/tags/metrics/","section":"Tags","summary":"","title":"Metrics","type":"tags"},{"content":"","date":"13 June 2025","externalUrl":null,"permalink":"/tags/saas/","section":"Tags","summary":"","title":"Saas","type":"tags"},{"content":" The CLTV/CAC Ratio: The Single Most Important SaaS Growth Metric # TLDR # This article aims to provide product leaders and managers with a thorough understanding of CLTV/CAC and its actionable insights for product strategy, especially in the context of commercial open-source software. I also ran the numbers for MongoDB as a real-world example.\nCustomer Lifetime Value (CLTV) # I’m assuming annual rates for this, but it would also work with monthly or daily rates.\nCustomer lifetime value (CLTV) represents the total revenue a business can reasonably expect from a single customer account over the entire relationship. Hence, CLTV = Average Revenue Per Account × Average customer life. E.g., if the average contract value (ACV) is $45K and the median customer lifetime is 4 years, then CLTV = $180K Customer Lifetime: The period for which the customer is retained. Hence, customer lifetime = ​1 / Define churn rate (Number of Customers Lost in a Period / Total Number of Customers at the Beginning of the Period). For instance, if you know your annual churn is 25%, you can expect the average customer to stay with you for 1/0.25 = 4 years. Customer Acquisition Costs (CAC): This is calculated by dividing your company\u0026rsquo;s total spend on direct sales by the number of customers acquired during the period. So, if you spent $1 million on sales this year and acquired 20 new customers, your Customer Acquisition Cost (CAC) would be $1 million / 20 = $ 50,000 per customer. The CLTV/CAC ratio indicates the revenue that will be generated for every dollar spent on acquiring customers. In our example above, this comes out to be $180K/$50K = 3.6 The Power of the CLTV/CAC Ratio # Ratio \u0026lt;= 1: This indicates the cost to acquire a customer is higher than the revenue generated over their lifetime, signaling an unsustainable business model. This is NOT good and signals a fundamental problem with scaling — you are losing money for every customer. Even when the business is breaking even on each customer, it is not generating profit. If you factor in operational costs and cost of capital, you are still losing money. Ratio \u0026gt; 1: This is where you probably are. Generally accepted healthy ratios are 3:1 or higher, but this varies by industry. Also note that the “ideal” ratio depends on the business’s growth stage and investment strategy. Estimating it against competitors:\nWhile it would be challenging to obtain customers’ CLTC or CAC numbers, for public companies, you can calculate average ACV by dividing revenue from subscriptions by the estimated number of customers. Similar calculations can be performed for CAC using the company\u0026rsquo;s balance sheet. I will demonstrate such a calculation using MongoDB’s latest filings.\nMongoDB’s CLTV/CAC Ratio # MongoDB\u0026rsquo;s latest fiscal results can be found here\nhttps://investors.mongodb.com/2025-Annual-Report-and-Proxy-Statement https://investors.mongodb.com/node/13176/pdf\nThe report states that the revenue from subscriptions is $1.94B, and the report cover indicates that they have over 54,500 customers, so that’s roughly $35,596 per customer. That’s a good first start.\nIt\u0026rsquo;s essential to note that MongoDB supports both product-led (MongoDB Atlas) and sales-led approaches, and the numbers associated with each would vary significantly. It’s also fair to assume that the sales-led growth targets larger accounts.\nConveniently, MongoDB does report direct sales customers and their revenue percentage. For the same period as above, they have reported 7,500 direct customers, which account for 88% of subscription revenue. Running the numbers, the average AVC for these 7500 customers turns out to be $1.94B x 0.88 / 7500 = $0.22M per customer. The reason we want to use this number is that it allows us to compare it with the sales-led cost of customer acquisition.\nNow, with average ACV, we need the churn rate to calculate CLTV. MongoDB reports (see image below) that the net ARR expansion was roughly 120%, meaning the revenue from existing customers grew by 20% (expansion deals — churn). While this doesn’t directly indicate the churn rate, we can assume the industry average for public SaaS companies’ expansion is around 30–35%, meaning the churn rate would be 10–15%.\nSo CLTV = 0.22M/0.15 = $1.46M per customer\nNow let’s look at the CAC. Sales and marketing costs for 2205 were $161M. Assuming that amount was spent on acquiring 500 customers over the last year (note that this includes churn, hence our CAC will be lower than the actual number), it comes out to be $161M/500 = $0.32M per customer.\nFinally, we can examine the CLTV/CAC ratio, which comes out to be $1.46M/$0.32M = 4.5, a very healthy ratio. It’s essential to note that this calculation is performed purely for educational purposes and should not be used to make financial decisions, as the calculations performed make a lot of crude assumptions.\nInterpreting CLTV/CAC Ratio # High CLTV signifies strong customer retention, effective monetization strategies (upselling, cross-selling), and potentially a strong product-market fit. Low CLTV signifies potential issues with customer satisfaction, high churn, ineffective pricing, or limited opportunities for expansion within existing accounts. There may be a need for product improvements, better customer engagement, or pricing adjustments. A high CAC indicates inefficient marketing campaigns, a lengthy sales cycle, a lack of product-market fit, or targeting the wrong audience, requiring significant effort to acquire customers. Low CAC implies efficient marketing and sales processes, strong organic growth, a highly desirable product, or effective targeting. Things Product Managers can look at to impact CLTV/CAC ratio\nPrioritizing Features: Utilize CLTV insights to prioritize features that enhance retention (improving lifetime value) or enable upselling or cross-selling (increasing average revenue per account). Optimizing Onboarding: Focus on creating a seamless onboarding experience to minimize early churn and maximize the realization of initial value. Growth Loops: Design product features that inherently drive acquisition (e.g., referrals, viral sharing). Pricing Strategy: Inform pricing decisions based on the perceived value and potential lifetime revenue of customers. Understanding Customer Segmentation: Analyze CLTV and CAC across different customer segments to identify the most valuable and cost-effective customer groups. This can inform product roadmap prioritization and the development of targeted features. Appendix # I want to acknowledge that MongoDB hasn’t been open-source since October 2018, when it changed its license from AGPL to SSPL. However, it’s still regarded as a major COSS player and hence used, for example, here.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"13 June 2025","externalUrl":null,"permalink":"/posts/cltv-cac-ratio/","section":"Posts","summary":"","title":"The CLTV/CAC Ratio: The Single Most Important SaaS Growth Metric","type":"posts"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"Ai","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/competition/","section":"Tags","summary":"","title":"Competition","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/copilot/","section":"Tags","summary":"","title":"Copilot","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/microsoft/","section":"Tags","summary":"","title":"Microsoft","type":"tags"},{"content":" Open Source Copilot Gambit: Microsoft\u0026rsquo;s Two-Pronged Plan to Stifle Competitors # We had some exciting news yesterday about Microsoft’s moves in the AI coding space. This post delves into the strategy and understands what’s behind these actions. What does it tell us about the fight for developers?\nMicrosoft is open-sourcing the client-side component of the GitHub co-pilot chat extension for VS Code, and it is being done under the MIT license, which is as permissive as open-source licenses get. This means that anyone can use it, modify it, or make changes based on the sources provided. This allows you to see how Copilot chat works within VS Code, including how it builds prompts, displays suggestions, and all other user-facing features. The key point here is that the actual AI models used in the backend remain proprietary. So while the Copilot AI model is still owned and controlled by Microsoft, opening up the client means that developers or even large companies could potentially point the Copilot interface at their own models, whether internal or other open-source LLMs, which directly addresses some significant concerns about vendor lock-in and data privacy.\nBesides driving adoption for GitHub Copilot, the open-source approach would allow AI to feel more native to VS Code itself, enabling it to catch up with AI-first editors like Cursor, which are perceived as offering a significantly better AI experience. It’s also worthwhile to note that while OpenAI and Microsoft have remained partners, OpenAI recently launched a preview of its own cloud-based software engineering agent, signalling a move away from Microsoft.\nAmidst this rising competition, something significant happened last month — Microsoft removed VSCode extensions from code forks. Microsoft started enforcing certain license terms, blocking specific key Microsoft VS Code extensions from running in VS Code forks like VSCodium and Cursor. Please note that the license terms themselves aren’t new; they have been in place since 2020. What’s new is the start of enforcing a five-year license term that restricts other IDE forks from using extensions shared via the VS Code Marketplace. One example is the C++ extension — It provides essential features, such as intelligent code completion and debugging tools, which are crucial for C++ developers. Blocking that extension for a tool like Cursor, which is built on VS Code’s open-source fork, directly broke developer workflows 😱.\nThis certainly appears to be a move aimed at hindering competition, as confirmed by Cursor’s CEO, Michael Trull, who mentioned that they will now be moving to open-source alternatives. This hasn’t gone unnoticed in the industry — Developers are calling it unfair competition. There’s even some talk of an FTC complaint being filed. The allegation is that Microsoft is blocking rivals to keep users locked into its ecosystem, which wouldn’t be the first time.\nWhat is immediately striking when examining this is that Microsoft appears to be holding almost contradictory positions at first glance. Open-sourcing the client-side of VS Code Autopilot is a move towards open source and fostering competition. However, they then use licensing to restrict those very competitors, such as Cursor, from using essential extensions built on the same underlying open-source VS Code platform. This is a strategy with two distinct parts: proactively opening up your offering to attract users who would have otherwise chosen open-source alternatives, while also defensively limiting rivals who are building on the same open-source base.\nWhat appears to be an upholding of OSS principles is, in reality, when combined with defensive restrictions, a proactive move to maintain leadership position, manage competition, and the developer narrative. The tension between open platforms and competitive business realities in the AI era is only going to intensify from here.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"22 May 2025","externalUrl":null,"permalink":"/posts/microsoft-copilot-gambit/","section":"Posts","summary":"","title":"Open Source Copilot Gambit: Microsoft's Two-Pronged Plan to Stifle Competitors","type":"posts"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/open-source/","section":"Tags","summary":"","title":"Open-Source","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/strategy/","section":"Tags","summary":"","title":"Strategy","type":"tags"},{"content":"","date":"8 May 2025","externalUrl":null,"permalink":"/tags/business-models/","section":"Tags","summary":"","title":"Business-Models","type":"tags"},{"content":"","date":"8 May 2025","externalUrl":null,"permalink":"/tags/commercial/","section":"Tags","summary":"","title":"Commercial","type":"tags"},{"content":" Evolution of Commercial Open Source Licensing # TLDR: Commercial software vendors\u0026rsquo; licensing strategies are rapidly changing — yet again. License changes and their impacts can be overwhelming for engineers, managers, and open-source software (OSS) contributors, so I aim to break them down in this article.\nEvolution of open source licensing models\nHow did we get here? # OSS vendors need protection from hyperscalers # This all started around the 2010s, when commercial vendors who initially leveraged open-source licenses for distribution and adoption found their business models under threat from cloud providers, such as hyperscalers like AWS. While they reaped the benefits of being free, i.e., usage spread quickly and widely, the downside was that competitors could freely utilize years of labor and offer competing services, often at a scale that the original open-source companies couldn’t match. This conflict drove the exploration and implementation of alternative licensing strategies, creating a new type of license that is still effectively open source, but with an added clause preventing the use of the software to compete with the vendor. One such license type is the AGPL, which I have extensively discussed in my earlier post here.\nWhile these new licenses drove adoption as good as purely open source licenses, they also allowed vendors to block new entrants in the market. Any new fork of the project would then have to contribute changes back to the open-source project. This model also prevented price gouging — Say if a vendor jacks up prices, or takes a drastic new direction, users or the community could fork the project (i.e., create their independent version), acting like a built-in accountability mechanism.\nTo summarize, the primary benefits were “frictionless distribution” and the inherent threat of a fork, which arguably kept vendors from abusing the software lock-in.\nCloud infra OSS vendors need more protection from AWS. # One downside to this was that the need to shield users from strong copyleft licenses, such as AGPL, for infrastructure components led to complex licensing schemes that included permissive licenses for interfaces. AGPL requires you to open-source your code if users interact with it over a network, while cloud infrastructure products, such as logging tools, do not directly interact with the user.\nTo overcome this, around 2014/2015, vendors began creating and utilizing new, stricter source-available licenses, also referred to as non-compete licenses or source-available licenses. A key example is MongoDB’s Server-Side Public License (SSPL). SSPL goes further, requiring you to open-source your entire service stack if offering the software as a service. SSPL addresses scenarios where businesses provide the functionality of the covered work to third parties as a service.\nMongoDB initially transitioned from an open-source license to the Server-Side Public License (SSPL) to prevent cloud provider competition. However, this shift created some distrust of commercial open source — there was quite a strong adverse reaction from many corners of the open source community. Many viewed it as a fundamental step away from the core principles of open source, as it felt like closing off something that was meant to be open.\nAround 2019, the concept of a “triple licensing strategy” for commercial open-source firms was articulated. This strategy involves offering a commercial license, a non-compete license for adoption, and a strong copyleft license for open source goodwill. Now in 2025, Triple-licensing is emerging as a potential strategy, particularly for mature vendors that have already experienced forks (e.g., Redis, Elasticsearch).\nTriple-Licensing Strategy # The basic idea is to offer the software under three distinct licenses simultaneously. Presented as a potential solution to the problems faced by infrastructure component vendors, this strategy involves offering three licenses:\nFirst, you’d have a plain, strong copyleft license, such as the AGPL. This is for the open-source purists, the community members who value that guaranteed freedom and sharing. To maintain the “mantle and goodwill of open source” and simplify licensing complexity compared to the older mixed-license approach. It should be noted, however, that nobody collaborates around strongly copyleft-licensed code unless they are a die-hard free software supporter. It’s essential to recognize that the strong copyleft license in triple licensing is primarily intended for “open source goodwill, nothing more, nothing less,” and does not promote collaboration or drive adoption. Second, you’d have something that’s almost like SSPL, designed for adoption, but crucially prevents the direct cloud competition we discussed. This license “replaces the original permissive-shields-for-a-copyleft-core strategy” for driving adoption. We can call the ‘anti-AWS’ license! Finally, a pay-for commercial license for traditional paying customers. This is the most restrictive option for users and lacks the “frictionless distribution” benefit of open licenses; however, this license generates revenue. Most recently, Redis transitioned from an open-source license to SSPL 1.0 (non-open source) in March 2024—one big stir. However, just over a year later, in April 2025, they reversed course and re-licensed under AGPL-1.0 as part of a triple-licensing strategy.\nElasticsearch did something similar, adding AGPL back into their mix after initially moving away from pure open-source. The ‘free’ tier in the screenshot below, from the Elasticsearch license page, clearly illustrates this change across different versions.\nElasticseach ‘free’ version moved from Apache to SSPL and then from SSPL to AGPL+SSPL over the years\nConcerns with a triple licensing model # What can go wrong with this triple license model? Personally. I have a few concerns.\nFirstly, vendors can tighten control by removing the free-to-use option entirely after establishing adoption with source-available licenses. This is seen as a potential future “payday” for vendors and a likely cause for users to “wake up.” If vendors regularly drop their source-available licenses, it may force new commercial open-source startups to adopt permissive open-source licenses from the outset. This would make “trademarks, quality, and speed” their primary competitive differentiators, which the author views as “probably a good thing.”\nSecondly, while triple-licensing simplifies licensing for infrastructure component vendors and provides a veneer of open-source goodwill, it does not drive adoption or foster collaboration, which is detrimental to the project and the community.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"8 May 2025","externalUrl":null,"permalink":"/posts/evolution-commercial-open-source-licensing/","section":"Posts","summary":"","title":"Evolution of Commercial Open Source Licensing","type":"posts"},{"content":"","date":"8 May 2025","externalUrl":null,"permalink":"/tags/legal/","section":"Tags","summary":"","title":"Legal","type":"tags"},{"content":"","date":"8 May 2025","externalUrl":null,"permalink":"/tags/licensing/","section":"Tags","summary":"","title":"Licensing","type":"tags"},{"content":" Business Models supporting FOSS end-of-life # Open source forms the backbone of modern software development. However, this landscape is ever-evolving, and inevitably, projects reach their end-of-life (EOL). This presents both a challenge and an opportunity: how can businesses effectively navigate this EOL maze, and what business models can support them?\nMy experience at Sonatype provided a crucial perspective on this. We focused on empowering developers to identify secure and reliable replacements for EOL open-source components, leveraging Software Bill of Materials (SBOM). This proactive approach is vital for maintaining software security and stability. Similarly, at Plotly, I witnessed the impact of EOL on popular charting OSS libraries, highlighting the need for strategic planning and support for users facing these transitions.\nOne key aspect of informing business decisions around EOL framework support lies in understanding the adoption rates of specific package versions. While not perfectly accurate, analyzing download statistics from repositories like Maven Central and GitHub, alongside engagement metrics from platforms like Stack Overflow, can offer valuable insights. A high volume of downloads for a particular version, coupled with active discussions (especially those related to implementation challenges or bug fixes) on Stack Overflow, suggests a significant and potentially dependent user base. This data can act as a strong signal, indicating where investment in EOL support and migration pathways would be most impactful.\nEnd-of-life (EOL) Software Scanning SaaS These platforms help proactively identify EOL components within a project’s dependencies and suggest secure and up-to-date alternatives, much like the product I managed at Sonatype. This is typically offered as a SaaS solution integrated into the development lifecycle, providing continuous monitoring and alerts. Popular vendors in this space include FOSSA obsolescence management, Aikido.dev, and Tenable.io. These tools often integrate with build pipelines and IDEs, offering developers real-time feedback on their dependencies.\nProviding Support Beyond EOL (Never-Ending Support — NES) Several business models capitalize on the need for EOL support. One approach is offering enhanced support and extended security maintenance for EOL frameworks to organizations that are not yet ready or able to migrate. Vendors such as Herodevs and Tuxcare have established businesses by providing NES (Never-Ending Support) for these open-source frameworks. This typically involves providing critical bug fixes, security patches, and sometimes even limited feature backports beyond the official EOL date, offered as a subscription service. While offering “never-ending” support has challenges regarding resource allocation and the evolving threat landscape, it caters to organizations with complex systems or strict compliance requirements that necessitate prolonged stability.\nProviding Migration Services and Tools Another model focuses on providing migration services and tools. Companies can offer expertise and tooling to help organizations seamlessly transition from EOL frameworks to newer or alternative technologies. This could include automated migration scripts, compatibility assessments, code refactoring services, and expert consulting. These services can significantly reduce the time and cost associated with complex migrations.\nData-Driven Insights and Analytics Finally, the data-driven insights gleaned from download statistics and community activity can be valuable offerings. Websites like Endoflife.date provide key reports on open-source adoption trends, the prevalence of specific EOL versions, and prediction of upcoming EOL risks based on project activity. This can help organizations make informed decisions about their technology roadmap and proactively plan migrations. This could include identifying emerging EOL risks within their dependency trees based on broader usage patterns.\nNavigating the end-of-life of open-source frameworks effectively is crucial for the stability, security, and longevity of software projects. The business models outlined above demonstrate the growing recognition of this need and offer valuable solutions for organizations seeking to manage this ever-evolving landscape.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"15 April 2025","externalUrl":null,"permalink":"/posts/business-models-foss-end-of-life/","section":"Posts","summary":"","title":"Business Models supporting FOSS end-of-life","type":"posts"},{"content":"","date":"15 April 2025","externalUrl":null,"permalink":"/tags/end-of-life/","section":"Tags","summary":"","title":"End-of-Life","type":"tags"},{"content":"","date":"15 April 2025","externalUrl":null,"permalink":"/tags/maintenance/","section":"Tags","summary":"","title":"Maintenance","type":"tags"},{"content":"","date":"15 April 2025","externalUrl":null,"permalink":"/tags/sustainability/","section":"Tags","summary":"","title":"Sustainability","type":"tags"},{"content":"","date":"14 March 2025","externalUrl":null,"permalink":"/tags/business-strategy/","section":"Tags","summary":"","title":"Business-Strategy","type":"tags"},{"content":"","date":"14 March 2025","externalUrl":null,"permalink":"/tags/pricing/","section":"Tags","summary":"","title":"Pricing","type":"tags"},{"content":" When Your Biggest Competitor Is Your Own Open Source Offering # In open source businesses, your most formidable competitor often isn’t another company — it’s your own freely available product. Unlike proprietary software battles over pricing, features, or marketing, open-source businesses frequently face an uphill challenge in convincing customers to move from free, community-driven offerings to paid, enterprise editions.\nMany open source companies have discovered that when it comes time to sell an Enterprise edition, the sales team is often fighting an uphill battle against their offering as many customers with deep pockets usually decide to continue with the free version and invest in custom development. The open source offering becomes the default option — even if the enterprise version packs additional features and robust support.\n“We’re Giving Too Much Away” — The Sales Perspective Having worked at multiple open source companies, sales told me that we should cut down features in the open source offering. They are not wrong — when we try to sell an Enterprise, the customer often wants to keep using open source and do custom development instead of buying an Enterprise offering. Hence, logically, they form the standard prescription to withhold certain features from the open source edition and reserve them for enterprise users. But strategically removing functionality often backfires. If users perceive intentional limitations, they may simply build their solutions rather than adopt the premium tier. Docker initially faced backlash when it tightened restrictions on Docker Hub’s free tier, prompting developers to explore alternative registries rather than move up to paid plans.\nDetermining What Goes into Open Source vs. Enterprise Deciding which features belong in open source isn’t purely about driving upgrades — it’s about fostering adoption and engagement within the developer community:\nCommoditized Features: If competitors widely offer a feature, withholding it makes little sense; inclusion becomes essential to stay relevant. Community Vitality: Features crucial for community momentum, adoption, or attracting new contributors should generally remain open. More reasons to add features to open source could be to drive developer adoption and community engagement. Much-asked-for updates and features become important to keep your community engaged and for new developers to pick up your open source framework.\nConversely, features are ideal candidates for enterprise tiers when they:\nAddress niche or enterprise-specific scenarios Provide compliance or security guarantees (e.g., SOC 2, HIPAA, GDPR) Offer managed or hosted services that significantly reduce operational complexity. Promise high perceived value, such as dedicated support, SLAs, and specialized integrations GitHub, for instance, differentiates clearly by offering advanced security features, audit logs, and robust CI/CD capabilities in their Enterprise tier — areas highly valuable for compliance-conscious enterprise customers.\nYour enterprise offering needs a block and a pull In many instances, feedback from sales teams reveals a surprising truth: If customers prefer investing in custom solutions instead of upgrading, it’s often a sign your enterprise product lacks critical pull rather than your open-source product being overly generous. It signals a strategic opportunity to improve the premium offering — enhancing enterprise-grade security, offering managed infrastructure, providing robust customer support, or guaranteeing uptime and reliability.\nIn other situations, it may be that the open source users never encounter any blocks to extend the value to their companies. For this reason, when GitHub initially launched, they required developers to pay for private repos (this has been changed since as they have matured to other value props)\nTo summarize,\nThe delta of value between the open-source offering and the commercial offering is not large enough for customers to pay for it. Once hooked, open-source users must experience a conflict that blocks them from creating value at the enterprise level. After experiencing the block, the users must experience a pull (premium features) that goes beyond their current needs and invites them to pay for the product. For instance, Confluent built its enterprise success on robust managed Kafka services, significantly reducing customers’ infrastructure overhead, thus creating a clear, compelling value proposition distinct from the open-source Apache Kafka. Here are some standard pulls that open-source companies try to add to their premium offering\nAuthentication \u0026amp; Authorization: GitLab and HashiCorp offer sophisticated access management to appeal to security-sensitive enterprises. Managed Services: MongoDB Atlas and Elastic Cloud offer hosted databases, removing operational overhead for customers. Support and SLAs: Red Hat’s entire enterprise model is built on providing guaranteed uptime, security patches, and comprehensive support, which justify enterprise pricing. Ultimately, thriving open-source businesses don’t succeed by withholding — they win by offering undeniably superior value in their enterprise offerings, clearly addressing enterprise-specific pain points beyond the reach of their open-source counterparts.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"14 March 2025","externalUrl":null,"permalink":"/posts/biggest-competitor-open-source/","section":"Posts","summary":"","title":"When Your Biggest Competitor Is Your Own Open Source Offering","type":"posts"},{"content":"","date":"6 March 2025","externalUrl":null,"permalink":"/tags/coss/","section":"Tags","summary":"","title":"Coss","type":"tags"},{"content":"","date":"6 March 2025","externalUrl":null,"permalink":"/tags/leverage/","section":"Tags","summary":"","title":"Leverage","type":"tags"},{"content":"","date":"6 March 2025","externalUrl":null,"permalink":"/tags/product-management/","section":"Tags","summary":"","title":"Product-Management","type":"tags"},{"content":" The Open Source Edge: 5 Ways PMs Can Gain Leverage # As a product manager in a commercial open-source software (COSS) company, you inherit unique advantages that traditional software vendors don’t. Your user base isn’t just your paying customers — it includes a massive global community of developers using your product for free. If leveraged correctly, this can be a powerful asset.\nIn this article, I will explore some advantages you can and should be leveraging.\nFaster Issue Identification With an open-source project, you don’t rely solely on internal QA or customer support tickets to identify issues. Millions of free users act as an extended testing network, reporting bugs via GitHub issues, forums, and social channels. This crowdsourced feedback helps to surface critical technical problems early.\nHowever, it’s important to prioritize effectively. The most vocal users don’t always represent the most impactful issues. Balancing community-driven reports with enterprise needs and strategic goals is key.\n2. Rapid Product Feedback\nYour community isn’t just a source of bug reports — it’s an always-on feedback loop. You can engage users through GitHub discussions, Slack, Discourse forums, polls, and idea boards. At Nexus Repo Manager, I helped launch an Ideas Portal to crowdsource feature requests, capturing thousands of free users\u0026rsquo; upvotes, comments, and valuable context.\nUnlike traditional software vendors, COSS companies can rapidly validate ideas before investing engineering resources , reducing risk and increasing confidence in product decisions.\nBuilt-in Product-Led Growth (PLG) Most SaaS companies spend heavily on free trials and onboarding to acquire users. Open-source companies already have a massive installed base — your challenge is to create a PLG journey around them.\nYour strategy should identify friction points where paid features create tangible value. At Sonatype, we built a free security scanner for Nexus Repository, which identified vulnerabilities but required a paid plan for remediation—this naturally guided business users toward an enterprise upgrade without disrupting their workflow.\n4. Community-Powered Product Demos\nSome of the best product demos don’t come from your sales team — they come from your community. Open-source users often build creative, high-impact use cases that showcase your product’s potential better than any scripted demo.\nAt Plotly, our most compelling data visualizations weren’t from internal teams but from open-source contributors. We actively encouraged this by running community challenges, highlighting user-generated content, and integrating the best examples into our marketing.\n5. Accelerated Developer Advocacy \u0026amp; Adoption\nIn traditional software, you need dedicated evangelists to drive awareness. In open source, your passionate user base does this for you. If you engage them effectively — through Discord, conferences, and contributor programs — they become your strongest advocates, organically spreading adoption in their organizations.\nBeing a PM at a COSS company means thinking beyond just customers — you’re managing an ecosystem. If you can harness community insights, guide free users to paid value, and amplify community contributions, you unlock a growth engine that proprietary software companies can’t easily replicate.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"6 March 2025","externalUrl":null,"permalink":"/posts/open-source-edge-product-managers/","section":"Posts","summary":"","title":"The Open Source Edge: 5 Ways PMs Can Gain Leverage","type":"posts"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/agpl/","section":"Tags","summary":"","title":"Agpl","type":"tags"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/copyleft/","section":"Tags","summary":"","title":"Copyleft","type":"tags"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/free-software/","section":"Tags","summary":"","title":"Free-Software","type":"tags"},{"content":" Why AGPL is a force for good? # There’s a common misconception that free software automatically means copyleft and that open source is inherently permissive. In reality, these terms represent different philosophies and legal frameworks.\nCopyleft licenses, including the AGPL, aren’t punitive — they require that modifications or derivative works remain under the same license, fostering a community-driven ecosystem. For example, Grafana Labs switched from Apache to AGPLv3 in 2021. Most users deploy Grafana unmodified, so the AGPL clause rarely becomes a hurdle, yet it ensures that any enhancements made to the software benefit everyone.\nAGPLv3 from GNU— Free as in Freedom Traditional GPL licenses (coming from GNU) were designed to ensure that modifications to software remained open when the software was redistributed. However, there was a loophole: when software was offered as a service over the web — what we call Software-as-a-Service (SaaS) — there was no obligation to share modifications since the software itself was never “distributed” in the traditional sense. The AGPL was introduced to address this gap. The AGPL extends the copyleft requirements of the GPL by including a “network use” clause. Hence, enforcing the AGPL can be challenging. Legal teams often point to instances like Google’s blanket ban on AGPL code — a decision likely driven by the complexity of ensuring correct license compliance. Even when paired with compatible licenses like GPLv3, AGPL’s requirements can extend to an entire distribution, complicating matters further.\nUnmodified AGLP-licensed components It’s crucial to understand that the AGPL doesn’t force companies to open-source proprietary code used internally or externally by default. If a business develops a proprietary user interface that interacts with an AGPL-licensed backend, such as Loki, there is no obligation to reveal its code.\nThis is akin to how dynamic linking with GPL software doesn’t require releasing proprietary modifications — only when the modified AGPL software is served directly to customers is the source code disclosure triggered, which brings us to our next point.\nModified AGLP-licensed components In practice, it’s worth noting that most companies use AGPL components in their unmodified form. If the modifications are used strictly internally, the company isn’t obligated to disclose those changes. However, once the modified software is made accessible to external users (for instance, through a cloud service), the company must release the modified source code.\nCase: What happened at Neo4J In May 2018, Neo4j dropped the AGPL for its Enterprise Edition (EE) and instead combined the AGPLv3 with the Commons Clause. This additional clause prohibited non-paying users from reselling the software or offering competing support services.\nThe complexities of AGPL enforcement were highlighted in Neo4j, Inc. v. PureThink, LLC, which revolved around the right to add change / modify contractual restrictions on top of AGPL-licensed software. When a licensee removed these restrictions, arguing that AGPLv3 explicitly allowed it, litigation followed, reinforcing the legal uncertainties around AGPL’s enforcement in hybrid licensing models. The licensee argued that under AGPLv3, Section 7, Paragraph 4, licensees are granted the right to remove any “further restrictions” added to the license: “If the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term.”\nIt\u0026rsquo;s interesting to note that they choose to use an AGPL license and not a GPL license, which would have allowed them to add additional restrictive clauses easily. However, in 2022, a California court issued a partial summary judgment affirming that a license combining the AGPL with non-open-source restrictions cannot be called “free and open source.” The court also upheld Neo4j’s interpretation that licensors (those licensing the software) could add additional restrictive terms, while licensees (those using the software) could not remove those terms.\nSince then, PureThink LLC\u0026rsquo;s founder has appealed to the US Court of Appeals to reconsider the California district court’s decision as this judgement impacts the future of ‘free’ FOSS licenses. This case underscores the challenges with blending copyleft and proprietary licensing models, especially when additional restrictions are imposed on AGPL’s open-access principles. The outcome will likely create a binding precedent that would limit one of the major freedoms that AGPLv3 and other GPL licenses aim to protect — the ability to remove restrictions added to GPL-licensed code.\nLatest News: https://www.theregister.com/2025/03/04/free_software_foundation_agplv3/\nThe guardian of Commercial Open Source Software Some argue that the AGPL license creates a moat for commercial open source companies by not allowing competition to emerge around them. Competitors who might try to build a business around the modified product can only do so under the AGPL license, preventing the creation of any moat for the competitor. Hence, the application of the AGPL by commercial open source companies is defensive, not progressive.\nIn my opinion, inherent advantages for the licensee can be beneficial rather than detrimental as they make FOSS license commercially attractive. This helps businesses drive innovation and make money while keeping the end users\u0026rsquo; interests at heart. It also helps them prevent large cloud providers (like AWS) from profiting off their open-source software without contributing back.\nThe winners and the losers Winner — The Community \u0026amp; commercial open source companies\nAGPL licenses are designed to ensure that improvements to a codebase remain open and available to the community. When developers build on AGPL software, any modifications made and deployed — especially over a network — must be released under the same license. By mandating that derivative works remain free, the AGPL protects the collective effort of countless contributors. This “pay-it-forward” approach means that every enhancement, bug fix, or new feature becomes accessible to all, fueling rapid innovation and mutual benefit.\nCommercial open source companies also benefit from the competitive moat that prevents others from using their work without contributing. While some argue this limits competition, it also strengthens the business model of COSS companies, allowing them to drive innovation and generate revenue while keeping user interests at heart.\nThe Loser — Cloud Commercial Gatekeepers\nThe primary impact of the AGPL is on companies like Amazon (AWS), whose cloud services might host popular open-source projects. The AGPL restricts them from offering these projects without complying with its terms. This stance supports the open source community by ensuring fair contribution and preventing free rides on community labor. Consequently, while these companies may have robust infrastructures and significant market power, the AGPL levels the playing field by enforcing a fair contribution policy.\nUnderstanding these nuances is vital for product or engineering managers. Recognizing that the AGPL aims to protect community contributions without stifling internal innovation can help balance legal obligations with business strategy while nurturing a collaborative ecosystem that drives open source innovation.\nFurther Reading\nhttps://drewdevault.com/2020/07/27/Anti-AGPL-propaganda.html # This article was originally published on Medium as part of the BoFOSS publication.\n","date":"25 February 2025","externalUrl":null,"permalink":"/posts/why-agpl-force-for-good/","section":"Posts","summary":"","title":"Why AGPL is a force for good?","type":"posts"},{"content":"","date":"24 February 2025","externalUrl":null,"permalink":"/tags/cloud-native/","section":"Tags","summary":"","title":"Cloud-Native","type":"tags"},{"content":"","date":"24 February 2025","externalUrl":null,"permalink":"/tags/cncf/","section":"Tags","summary":"","title":"Cncf","type":"tags"},{"content":"","date":"24 February 2025","externalUrl":null,"permalink":"/tags/donation/","section":"Tags","summary":"","title":"Donation","type":"tags"},{"content":"","date":"24 February 2025","externalUrl":null,"permalink":"/tags/governance/","section":"Tags","summary":"","title":"Governance","type":"tags"},{"content":" The Upside To Donating Projects to the CNCF # In an era where open-source leadership defines the competitive edge, technology directors at open-source companies often have to decide and explain if they donate your project to the Cloud Native Computing Foundation (CNCF). The CNCF isn’t just another industry body — it’s a crucible where projects evolve from early-stage ideas to mature, community-certified solutions fully.\nSome recent examples of this strategic play are — Solo.io’s decision to donate its leading open-source API gateway to CNCF, and Red Hat\u0026rsquo;s intention to donate multiple tools for creating and managing containers, including Podman, to the Cloud Native Computing Foundation (CNCF).\nMilestones as Maturity Benchmarks / Industry Standards\nOne of the most compelling advantages of donating a project to CNCF is the stamp of approval with its milestones. The CNCF milestones serve as an industry-trusted benchmark. The CNCF nurtures projects through a clearly defined journey — from the Sandbox phase for early-stage ideas, incubation, and ultimately graduation. A graduate project signals technical maturity and a robust, diverse community of contributors. This translates to higher credibility for consumers of those technologies, often large enterprises. Customers and partners alike take note when a project has “made it” through the CNCF pipeline.\nIt is important to note that several projects have remained in the CNCF Sandbox or Incubating stage without graduating. For example, Spotify’s Backstage and KubeVela are notable projects that, despite growing adoption and active communities, haven’t yet met all the CNCF graduation criteria. It’s important to note that remaining in Sandbox or Incubation doesn’t imply failure — it often reflects a project’s ongoing evolution and the rigorous benchmarks set by CNCF.\nDriving Community Innovation and Market Positioning\nBeyond credibility, joining CNCF can significantly accelerate innovation. People are more reluctant to volunteer when it’s evident that a corporation is profiting substantially while volunteers receive no share of the benefits. Donating to CNCF opens the door to a broader pool of contributors and ecosystem partners who bring fresh perspectives and technical expertise. By associating with CNCF, your project gains synergies with other leading initiatives, enhancing credibility and accelerating innovation through shared expertise. This validation can be incredibly persuasive to enterprises and partners evaluating your project. A critical advantage in today’s fast-paced market is having a project that evolves quickly and adapts to new challenges. Moreover, aligning with CNCF’s neutral, globally recognized brand can enhance your company’s strategic positioning, signaling that you’re committed to the open-source ethos and long-term industry growth.\nA Measured Security Assessment Process\nOne standout service is the CNCF TAG-Security Security Assessment Process (TSSA). This process reduces ecosystem risk by improving vulnerability detection and resolution and enhancing domain expertise through collaborative assessments. Another goal is accelerating adoption by providing consistent, structured security documentation, establishing a measurable security baseline, and clearly outlining design goals, potential risks, and next steps.\nThe TSSA offers a view of a project’s security design and fosters a culture of security awareness. It delivers an external security validation that can boost your project’s credibility.\nThe Donation Process and Its Considerations\nIt’s important to remember that donating a project to CNCF is not a casual decision. The process requires an application, thoughtful decision-making, and not guaranteed acceptance. For many projects, however, milestone-based validation and the structured TSSA are compelling advantages that help reinforce an already successful governance model. For a more detailed list of action items for any project onboarding as a sandbox project — please visit this link.\nThis article was originally published on Medium as part of the BoFOSS publication.\n","date":"24 February 2025","externalUrl":null,"permalink":"/posts/upside-donating-projects-cncf/","section":"Posts","summary":"","title":"The Upside To Donating Projects to the CNCF","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]